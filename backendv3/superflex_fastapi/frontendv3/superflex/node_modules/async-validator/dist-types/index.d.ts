import { InternalRuleItem, InternalValidateMessages, RuleItem, Rules, ValidateCallback, ValidateMessages, ValidateOption, Values, SyncErrorType } from 'async-validator/dist-types/interface';
export * from 'async-validator/dist-types/interface';
/**
 *  Encapsulates a validation schema.
 *
 *  @param descriptor An object declaring validation rules
 *  for this schema.
 */
declare class Schema {
    static register: (type: string, validator: any) => void;
    static warning: (type: string, errors: SyncErrorType[]) => void;
    static messages: InternalValidateMessages;
    static validators: {
        string: import("async-validator/dist-types/interface").ExecuteValidator;
        method: import("async-validator/dist-types/interface").ExecuteValidator;
        number: import("async-validator/dist-types/interface").ExecuteValidator;
        boolean: import("async-validator/dist-types/interface").ExecuteValidator;
        regexp: import("async-validator/dist-types/interface").ExecuteValidator;
        integer: import("async-validator/dist-types/interface").ExecuteValidator;
        float: import("async-validator/dist-types/interface").ExecuteValidator;
        array: import("async-validator/dist-types/interface").ExecuteValidator;
        object: import("async-validator/dist-types/interface").ExecuteValidator;
        enum: import("async-validator/dist-types/interface").ExecuteValidator;
        pattern: import("async-validator/dist-types/interface").ExecuteValidator;
        date: import("async-validator/dist-types/interface").ExecuteValidator;
        url: import("async-validator/dist-types/interface").ExecuteValidator;
        hex: import("async-validator/dist-types/interface").ExecuteValidator;
        email: import("async-validator/dist-types/interface").ExecuteValidator;
        required: import("async-validator/dist-types/interface").ExecuteValidator;
        any: import("async-validator/dist-types/interface").ExecuteValidator;
    };
    rules: Record<string, RuleItem[]>;
    _messages: InternalValidateMessages;
    constructor(descriptor: Rules);
    define(rules: Rules): void;
    messages(messages?: ValidateMessages): InternalValidateMessages;
    validate(source: Values, option?: ValidateOption, callback?: ValidateCallback): Promise<Values>;
    validate(source: Values, callback: ValidateCallback): Promise<Values>;
    validate(source: Values): Promise<Values>;
    getType(rule: InternalRuleItem): import("async-validator/dist-types/interface").RuleType;
    getValidationMethod(rule: InternalRuleItem): ((rule: InternalRuleItem, value: any, callback: (error?: string | Error) => void, source: Values, options: ValidateOption) => void | import("async-validator/dist-types/interface").SyncValidateResult) | import("async-validator/dist-types/interface").ExecuteValidator;
}
export default Schema;
